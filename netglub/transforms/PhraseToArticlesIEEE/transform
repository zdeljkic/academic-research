#!/usr/bin/python

# This transforms takes a phrase and searches IEEE Xplore for articles.
# The website url and the maximum number of returned books and articles is passed in as a parameter.

import requests
from bs4 import BeautifulSoup
from generic_transform import *

# load input phrase and parameters
e_type,e_values,params = get_from_args()

query = e_values["value"]
numResults = int(params["numResults"])

# load one page with 100 results
par = {"queryText": query, "rowsPerPage": "100", "pageNumber": "1"}
req = requests.get("http://ieeexplore.ieee.org/search/searchresult.jsp", params = par)
soup = BeautifulSoup(req.text)

for parent_tag in soup.find_all(class_ = "detail"):
	# get the title tag and string
	title_tag = parent_tag.find("h3")

	title_string = title_tag.text.strip()

	# the authors are listed in one of these two forms:
	# 1) <lastname>, <firstname>
	# 2) <firstname> <lastname>
	# we want to get the authors in this form:
	# <lastname1>, <initials1>; <lastname2>, <initials2>, ...
	authors_string = ""
	for tag in parent_tag.find_all(id = "preferredName"):
		author_string = tag.parent.text.strip()
		
		if "," in author_string:		# form #1
			lastname, firstname = author_string.split(", ")
		elif " " in author_string:		# form #2
			firstname, lastname = author_string.split(" ", 1)
		else:							# unknown form (single word), skip
			continue
			
		authors_string += lastname + ", " + firstname + "; "
	
	authors_string = authors_string[:-2]	# remove the trailing "; "

	# get the date
	# there is no date tag, we can get the date from the parent_tag's text (it comes after "Publication Year: ")
	index = parent_tag.text.find("Publication Year:" )
	
	date_string = parent_tag.text[index+18:index+22]

	# write the result and decrement the remaing number of results we have to fetch
	write_result("article", {"value": title_string, "authors": authors_string, "date": date_string})
	numResults -= 1

	# if we found all the results - exit
	if numResults == 0:
		sys.exit()

