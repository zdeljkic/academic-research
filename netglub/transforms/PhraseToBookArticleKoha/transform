#!/usr/bin/python

# This transforms takes a phrase and searches a website that uses the Koha Integrated Library System.
# The website url and the maximum number of returned books and articles is passed in as a parameter.

import requests
from bs4 import BeautifulSoup
from generic_transform import *

# load input phrase and parameters
e_type,e_values,params = get_from_args()

query = e_values["value"]
url = params["url"]
maxResults = params["maxResults"]

# the input url is in one of these three forms:
# 1) http://example.com
# 2) http://example.com/
# 3) http://example.com/cgi-bin/koha/opac-main.pl
# we need to get it in the form of http://example.com/cgi-bin/koha/opac-search.pl
if url.endswith("/cgi-bin/koha/opac-main.pl"):
	searchurl = url[:-7] + "search.pl"
elif url.endswith("/"):
	searchurl = url + "cgi-bin/koha/opac-search.pl"
else:
	searchurl = url + "/cgi-bin/koha/opac-search.pl"

req = requests.get(searchurl, params = {"q": query})
soup = BeautifulSoup(req.text)

# set up the counter so we don't return more results than asked
counter = int(maxResults)

for title_tag in soup.find_all(class_ = "title"):
	# check if we've already returned the max amount of results
	if counter == 0:
		break

	# we're going to use the title_tag's parent tag to easily navigate to other tags
	parent_tag = title_tag.parent

	# get the title string
	title_string = title_tag.text

	# try to get the authors_tag and check if it exists
	# if it does, the authors string is almost already in the correct format,
	# we just need to remove the extra whitespace and the trailing dot
	# if it doesn't, just leave the authors string empty
	authors_tag = parent_tag.find(class_ = "author")

	if authors_tag is not None:
		authors_string = authors_tag.text.replace("\n            ", " ")[:-2]
	else:
		authors_string = ""

	# get the type (book or article), if it's neither - skip the entry
	type_tag = parent_tag.find(class_ = "materialtype")

	type_string = type_tag["alt"]
	if not (type_string == "article" or type_string == "book"):
		continue

	# try to get the tag with the publisher information, and check if it exists
	# if it does, and the last 4 charaters aren't "   0" or similar, we take them as the publishing year
	date_tag = parent_tag.find(class_ = "results_summary publisher")

	if date_tag is not None and date_tag.text[-4:].strip() != "0":
		date_string = date_tag.text[-4:].strip()
	else:
		date_string = ""

	# write the final result and decrement the counter counting the remaining number of results we have to fetch
	write_result(type_string, {"value": title_string, "authors": authors_string, "date": date_string})
	counter -= 1

